{
	"info": {
		"_postman_id": "7157c0a8-1e14-4839-9573-bb919c5c608a",
		"name": "JSON_Placeholder",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39038098"
	},
	"item": [
		{
			"name": "/posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const statusCode = 201;\r",
							"const response = pm.response.json();\r",
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"title\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"body\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"userId\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"id\": {\r",
							"      \"type\": \"number\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"title\",\r",
							"    \"body\",\r",
							"    \"userId\",\r",
							"    \"id\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is \" + statusCode, function () {\r",
							"    pm.response.to.have.status(statusCode);\r",
							"    pm.environment.set(\"id\", response.id);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate backend response\", function () {\r",
							"    pm.expect(response.id).to.eql(pm.environment.get(\"id\"));\r",
							"    pm.expect(response.userId).to.eql(1);\r",
							"    pm.expect(response.title).to.exist;\r",
							"    pm.expect(response.body).to.exist;\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Postman [Teste]\",\r\n    \"body\": \"Postman [Teste-Body]\",\r\n    \"userId\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/posts",
					"host": [
						"{{host}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "/posts/id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const statusCode = 200;\r",
							"const response = pm.response.json();\r",
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"title\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"body\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"userId\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"id\": {\r",
							"      \"type\": \"number\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"title\",\r",
							"    \"body\",\r",
							"    \"userId\",\r",
							"    \"id\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is \" + statusCode, function () {\r",
							"    pm.response.to.have.status(statusCode);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate backend response\", function () {\r",
							"    pm.expect(response.id).to.eql(1);\r",
							"    pm.expect(response.title).to.exist;\r",
							"    pm.expect(response.body).to.exist;\r",
							"    pm.expect(response.userId).to.exist;\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/posts/1",
					"host": [
						"{{host}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "/posts/id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const statusCode = 200;\r",
							"const response = pm.response.json();\r",
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"title\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"body\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"userId\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"id\": {\r",
							"      \"type\": \"number\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"title\",\r",
							"    \"body\",\r",
							"    \"userId\",\r",
							"    \"id\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is \" + statusCode, function () {\r",
							"    pm.response.to.have.status(statusCode);\r",
							"    pm.environment.set(\"id\", response.id);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate backend response\", function () {\r",
							"    pm.expect(response.id).to.eql(pm.environment.get(\"id\"));\r",
							"    pm.expect(response.userId).to.eql(2);\r",
							"    pm.expect(response.title).to.exist;\r",
							"    pm.expect(response.body).to.exist;\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Postman [Teste-Atualiza]\",\r\n    \"body\": \"Postman [Teste-Body-Atualiza]\",\r\n    \"userId\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/posts/2",
					"host": [
						"{{host}}"
					],
					"path": [
						"posts",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "/posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const statusCode = 200;\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is \" + statusCode, function () {\r",
							"    pm.response.to.have.status(statusCode);\r",
							"});\r",
							"\r",
							"pm.test(\"Response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/posts",
					"host": [
						"{{host}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "/posts/id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const statusCode = 200;\r",
							"const response = pm.response.json();\r",
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"title\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"body\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"userId\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"id\": {\r",
							"      \"type\": \"number\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"title\",\r",
							"    \"body\",\r",
							"    \"userId\",\r",
							"    \"id\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is \" + statusCode, function () {\r",
							"    pm.response.to.have.status(statusCode);\r",
							"    pm.environment.set(\"id\", response.id);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate backend response\", function () {\r",
							"    pm.expect(response.id).to.eql(pm.environment.get(\"id\"));\r",
							"    pm.expect(response.userId).to.eql(1);\r",
							"    pm.expect(response.title).to.exist;\r",
							"    pm.expect(response.body).to.exist;\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"body\": \"Postman [Teste-Body-Atualiza]\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/posts/1",
					"host": [
						"{{host}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "/posts/1/comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const statusCode = 200;\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is \" + statusCode, function () {\r",
							"    pm.response.to.have.status(statusCode);\r",
							"});\r",
							"\r",
							"pm.test(\"Response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/posts/1/comments",
					"host": [
						"{{host}}"
					],
					"path": [
						"posts",
						"1",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "/comments?postId=1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const statusCode = 200;\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is \" + statusCode, function () {\r",
							"    pm.response.to.have.status(statusCode);\r",
							"});\r",
							"\r",
							"pm.test(\"Response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/comments?postId=1",
					"host": [
						"{{host}}"
					],
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "postId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/posts/id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const statusCode = 200;\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is \" + statusCode, function () {\r",
							"    pm.response.to.have.status(statusCode);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is empty JSON\", function () {\r",
							"    pm.expect(response).to.eql({});\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/posts/1",
					"host": [
						"{{host}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		}
	]
}